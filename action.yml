name: 'GitVersion Calculator'
description: 'Calculate semantic version using GitVersion and optionally update package.json'
author: 'wistiteek'

branding:
  icon: 'tag'
  color: 'blue'

inputs:
  version:
    description: 'Version to use (optional, will be auto-calculated if empty)'
    required: false
    type: string
  config-file:
    description: 'Path to GitVersion config file'
    required: false
    default: 'GitVersion.yml'
    type: string
  update-package-json:
    description: 'Update package.json with calculated version'
    required: false
    default: 'true'
    type: boolean
  upload-artifact:
    description: 'Upload updated package.json as artifact'
    required: false
    default: 'true'
    type: boolean

outputs:
  version:
    description: 'Full semantic version (e.g., 1.2.3)'
    value: ${{ steps.gitversion.outputs.semVer }}
  major:
    description: 'Major version number'
    value: ${{ steps.gitversion.outputs.major }}
  minor:
    description: 'Minor version number'
    value: ${{ steps.gitversion.outputs.minor }}
  patch:
    description: 'Patch version number'
    value: ${{ steps.gitversion.outputs.patch }}
  build_number:
    description: 'Build metadata'
    value: ${{ steps.gitversion.outputs.buildMetaData }}
  prerelease:
    description: 'Pre-release tag'
    value: ${{ steps.gitversion.outputs.preReleaseTag }}
  branch:
    description: 'Branch name'
    value: ${{ steps.gitversion.outputs.branchName }}
  sha:
    description: 'Commit SHA'
    value: ${{ steps.gitversion.outputs.sha }}
  package_json_artifact:
    description: 'Name of the artifact containing updated package.json'
    value: updated-package-json-${{ steps.gitversion.outputs.semVer }}

runs:
  using: "composite"
  steps:
    - name: 🏷️ Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.1.0
      with:
        versionSpec: '6.x'

    - name: 🏷️ Calculate version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v4.1.0
      with:
        useConfigFile: true
        configFilePath: ${{ inputs.config-file }}

    - name: 📋 Version Summary
      shell: bash
      run: |
        echo "🏷️ VERSION CALCULÉE:"
        echo "   - Version complète: ${{ steps.gitversion.outputs.semVer }}"
        echo "   - Major: ${{ steps.gitversion.outputs.major }}"
        echo "   - Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "   - Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "   - Pre-release: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "   - Build: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "   - Branch: ${{ steps.gitversion.outputs.branchName }}"
        echo "   - Commit: ${{ steps.gitversion.outputs.sha }}"

    - name: 📝 Update package.json version
      if: ${{ inputs.update-package-json == 'true' }}
      shell: bash
      run: |
        if [ -f "package.json" ]; then
          echo "🏷️ Mise à jour de la version vers ${{ steps.gitversion.outputs.semVer }}"

          # Installer jq si nécessaire
          if ! command -v jq &> /dev/null; then
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              sudo apt-get update && sudo apt-get install -y jq
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              brew install jq
            fi
          fi

          # Utiliser jq pour mettre à jour proprement le package.json
          jq '.version = "${{ steps.gitversion.outputs.semVer }}"' package.json > package.json.tmp
          mv package.json.tmp package.json

          echo "✅ Version mise à jour dans package.json"
          echo "📝 Nouvelle version:"
          jq -r '.version' package.json
        else
          echo "⚠️ Pas de package.json trouvé, skip mise à jour"
        fi

    - name: 📤 Upload updated package.json
      if: ${{ inputs.update-package-json == 'true' && inputs.upload-artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: updated-package-json-${{ steps.gitversion.outputs.semVer }}
        path: package.json
        retention-days: 1

    - name: 📋 Final Summary
      shell: bash
      run: |
        echo "🎯 RÉSUMÉ DU CALCUL DE VERSION:"
        echo "   - Repository: ${{ github.repository }}"
        echo "   - Branch: ${{ github.ref_name }}"
        echo "   - Commit: ${{ github.sha }}"
        echo "   - Version calculée: ${{ steps.gitversion.outputs.semVer }}"
        if [[ "${{ inputs.update-package-json }}" == "true" ]]; then
          echo "   - package.json: ✅ Mis à jour"
          if [[ "${{ inputs.upload-artifact }}" == "true" ]]; then
            echo "   - Artifact: updated-package-json-${{ steps.gitversion.outputs.semVer }}"
          fi
        else
          echo "   - package.json: ⏭️ Non modifié"
        fi
